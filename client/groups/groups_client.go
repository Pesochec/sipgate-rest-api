// Code generated by go-swagger; DO NOT EDIT.

package groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new groups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for groups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddDeviceToGroup(params *AddDeviceToGroupParams, authInfo runtime.ClientAuthInfoWriter) error

	GetGroup(params *GetGroupParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupOK, error)

	GetGroupFaxlineCallerID(params *GetGroupFaxlineCallerIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupFaxlineCallerIDOK, error)

	GetGroupFaxlineNumbers(params *GetGroupFaxlineNumbersParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupFaxlineNumbersOK, error)

	GetGroupFaxlines(params *GetGroupFaxlinesParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupFaxlinesOK, error)

	GetGroupFaxlinesForUser(params *GetGroupFaxlinesForUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupFaxlinesForUserOK, error)

	GetGroupNumbers(params *GetGroupNumbersParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupNumbersOK, error)

	GetGroupUsers(params *GetGroupUsersParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupUsersOK, error)

	GetGroupVoicemail(params *GetGroupVoicemailParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupVoicemailOK, error)

	GetGroups(params *GetGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupsOK, error)

	RemoveDeviceFromGroup(params *RemoveDeviceFromGroupParams, authInfo runtime.ClientAuthInfoWriter) error

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddDeviceToGroup adds device to group
*/
func (a *Client) AddDeviceToGroup(params *AddDeviceToGroupParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDeviceToGroupParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addDeviceToGroup",
		Method:             "POST",
		PathPattern:        "/groups/{groupId}/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddDeviceToGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetGroup gets a single groups details
*/
func (a *Client) GetGroup(params *GetGroupParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGroup",
		Method:             "GET",
		PathPattern:        "/groups/{groupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGroupFaxlineCallerID gets the caller ID of a specific group fax
*/
func (a *Client) GetGroupFaxlineCallerID(params *GetGroupFaxlineCallerIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupFaxlineCallerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupFaxlineCallerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGroupFaxlineCallerId",
		Method:             "GET",
		PathPattern:        "/groupfaxlines/{faxlineId}/callerid",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGroupFaxlineCallerIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGroupFaxlineCallerIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGroupFaxlineCallerId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGroupFaxlineNumbers lists all phone numbers routed to group fax line
*/
func (a *Client) GetGroupFaxlineNumbers(params *GetGroupFaxlineNumbersParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupFaxlineNumbersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupFaxlineNumbersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGroupFaxlineNumbers",
		Method:             "GET",
		PathPattern:        "/groupfaxlines/{faxlineId}/numbers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGroupFaxlineNumbersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGroupFaxlineNumbersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGroupFaxlineNumbers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGroupFaxlines lists all fax lines for a specific group
*/
func (a *Client) GetGroupFaxlines(params *GetGroupFaxlinesParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupFaxlinesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupFaxlinesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGroupFaxlines",
		Method:             "GET",
		PathPattern:        "/groups/{groupId}/faxlines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGroupFaxlinesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGroupFaxlinesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGroupFaxlines: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGroupFaxlinesForUser lists all group fax lines
*/
func (a *Client) GetGroupFaxlinesForUser(params *GetGroupFaxlinesForUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupFaxlinesForUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupFaxlinesForUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGroupFaxlinesForUser",
		Method:             "GET",
		PathPattern:        "/groupfaxlines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGroupFaxlinesForUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGroupFaxlinesForUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGroupFaxlinesForUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGroupNumbers lists all phone numbers routed to group
*/
func (a *Client) GetGroupNumbers(params *GetGroupNumbersParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupNumbersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupNumbersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGroupNumbers",
		Method:             "GET",
		PathPattern:        "/groups/{groupId}/numbers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGroupNumbersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGroupNumbersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGroupNumbers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGroupUsers lists all group members
*/
func (a *Client) GetGroupUsers(params *GetGroupUsersParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGroupUsers",
		Method:             "GET",
		PathPattern:        "/groups/{groupId}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGroupUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGroupUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGroupUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGroupVoicemail lists all voicemails for a specific group
*/
func (a *Client) GetGroupVoicemail(params *GetGroupVoicemailParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupVoicemailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupVoicemailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGroupVoicemail",
		Method:             "GET",
		PathPattern:        "/groups/{groupId}/voicemail",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGroupVoicemailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGroupVoicemailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGroupVoicemail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGroups lists all groups
*/
func (a *Client) GetGroups(params *GetGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGroups",
		Method:             "GET",
		PathPattern:        "/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveDeviceFromGroup removes device from group
*/
func (a *Client) RemoveDeviceFromGroup(params *RemoveDeviceFromGroupParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveDeviceFromGroupParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeDeviceFromGroup",
		Method:             "DELETE",
		PathPattern:        "/groups/{groupId}/devices/{deviceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveDeviceFromGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
