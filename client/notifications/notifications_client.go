// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new notifications API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for notifications API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddFaxEmailNotification(params *AddFaxEmailNotificationParams, authInfo runtime.ClientAuthInfoWriter) error

	AddFaxReportEmailNotification(params *AddFaxReportEmailNotificationParams, authInfo runtime.ClientAuthInfoWriter) error

	AddFaxSmsNotification(params *AddFaxSmsNotificationParams, authInfo runtime.ClientAuthInfoWriter) error

	AddSmsEmailNotification(params *AddSmsEmailNotificationParams, authInfo runtime.ClientAuthInfoWriter) error

	AddVoicemailEmailNotification(params *AddVoicemailEmailNotificationParams, authInfo runtime.ClientAuthInfoWriter) error

	AddVoicemailSmsNotification(params *AddVoicemailSmsNotificationParams, authInfo runtime.ClientAuthInfoWriter) error

	CreateEmailNotificationForCall(params *CreateEmailNotificationForCallParams, authInfo runtime.ClientAuthInfoWriter) error

	CreateSmsNotificationForCall(params *CreateSmsNotificationForCallParams, authInfo runtime.ClientAuthInfoWriter) error

	DeleteNotification(params *DeleteNotificationParams, authInfo runtime.ClientAuthInfoWriter) error

	GetNotifications(params *GetNotificationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNotificationsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddFaxEmailNotification creates a new email notification for faxes
*/
func (a *Client) AddFaxEmailNotification(params *AddFaxEmailNotificationParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddFaxEmailNotificationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addFaxEmailNotification",
		Method:             "POST",
		PathPattern:        "/{userId}/notifications/fax/email",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddFaxEmailNotificationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  AddFaxReportEmailNotification creates a new email notification for fax reports
*/
func (a *Client) AddFaxReportEmailNotification(params *AddFaxReportEmailNotificationParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddFaxReportEmailNotificationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addFaxReportEmailNotification",
		Method:             "POST",
		PathPattern:        "/{userId}/notifications/fax/report",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddFaxReportEmailNotificationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  AddFaxSmsNotification creates a new sms notification for faxes
*/
func (a *Client) AddFaxSmsNotification(params *AddFaxSmsNotificationParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddFaxSmsNotificationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addFaxSmsNotification",
		Method:             "POST",
		PathPattern:        "/{userId}/notifications/fax/sms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddFaxSmsNotificationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  AddSmsEmailNotification creates a new email notification for incoming sms
*/
func (a *Client) AddSmsEmailNotification(params *AddSmsEmailNotificationParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddSmsEmailNotificationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addSmsEmailNotification",
		Method:             "POST",
		PathPattern:        "/{userId}/notifications/sms/email",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddSmsEmailNotificationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  AddVoicemailEmailNotification creates a new email notification for voicemails
*/
func (a *Client) AddVoicemailEmailNotification(params *AddVoicemailEmailNotificationParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddVoicemailEmailNotificationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addVoicemailEmailNotification",
		Method:             "POST",
		PathPattern:        "/{userId}/notifications/voicemail/email",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddVoicemailEmailNotificationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  AddVoicemailSmsNotification creates a new sms notification for voicemails
*/
func (a *Client) AddVoicemailSmsNotification(params *AddVoicemailSmsNotificationParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddVoicemailSmsNotificationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addVoicemailSmsNotification",
		Method:             "POST",
		PathPattern:        "/{userId}/notifications/voicemail/sms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddVoicemailSmsNotificationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  CreateEmailNotificationForCall creates a new email notification for calls
*/
func (a *Client) CreateEmailNotificationForCall(params *CreateEmailNotificationForCallParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEmailNotificationForCallParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createEmailNotificationForCall",
		Method:             "POST",
		PathPattern:        "/{userId}/notifications/call/email",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateEmailNotificationForCallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  CreateSmsNotificationForCall creates a new sms notification for calls
*/
func (a *Client) CreateSmsNotificationForCall(params *CreateSmsNotificationForCallParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSmsNotificationForCallParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSmsNotificationForCall",
		Method:             "POST",
		PathPattern:        "/{userId}/notifications/call/sms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSmsNotificationForCallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteNotification deletes an existing notification
*/
func (a *Client) DeleteNotification(params *DeleteNotificationParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNotificationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNotification",
		Method:             "DELETE",
		PathPattern:        "/{userId}/notifications/{notificationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNotificationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetNotifications gets all notifications
*/
func (a *Client) GetNotifications(params *GetNotificationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNotificationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNotificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNotifications",
		Method:             "GET",
		PathPattern:        "/{userId}/notifications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNotificationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNotificationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNotifications: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
