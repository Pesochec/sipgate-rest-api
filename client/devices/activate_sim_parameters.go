// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/kben/sipgate-rest-api/models"
)

// NewActivateSimParams creates a new ActivateSimParams object
// with the default values initialized.
func NewActivateSimParams() *ActivateSimParams {
	var ()
	return &ActivateSimParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewActivateSimParamsWithTimeout creates a new ActivateSimParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewActivateSimParamsWithTimeout(timeout time.Duration) *ActivateSimParams {
	var ()
	return &ActivateSimParams{

		timeout: timeout,
	}
}

// NewActivateSimParamsWithContext creates a new ActivateSimParams object
// with the default values initialized, and the ability to set a context for a request
func NewActivateSimParamsWithContext(ctx context.Context) *ActivateSimParams {
	var ()
	return &ActivateSimParams{

		Context: ctx,
	}
}

// NewActivateSimParamsWithHTTPClient creates a new ActivateSimParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewActivateSimParamsWithHTTPClient(client *http.Client) *ActivateSimParams {
	var ()
	return &ActivateSimParams{
		HTTPClient: client,
	}
}

/*ActivateSimParams contains all the parameters to send to the API endpoint
for the activate sim operation typically these are written to a http.Request
*/
type ActivateSimParams struct {

	/*Body*/
	Body *models.ActivateSimRequest
	/*DeviceID
	  The unique mobile device identifier

	*/
	DeviceID string
	/*UserID
	  The unique user identifier

	*/
	UserID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the activate sim params
func (o *ActivateSimParams) WithTimeout(timeout time.Duration) *ActivateSimParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the activate sim params
func (o *ActivateSimParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the activate sim params
func (o *ActivateSimParams) WithContext(ctx context.Context) *ActivateSimParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the activate sim params
func (o *ActivateSimParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the activate sim params
func (o *ActivateSimParams) WithHTTPClient(client *http.Client) *ActivateSimParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the activate sim params
func (o *ActivateSimParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the activate sim params
func (o *ActivateSimParams) WithBody(body *models.ActivateSimRequest) *ActivateSimParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the activate sim params
func (o *ActivateSimParams) SetBody(body *models.ActivateSimRequest) {
	o.Body = body
}

// WithDeviceID adds the deviceID to the activate sim params
func (o *ActivateSimParams) WithDeviceID(deviceID string) *ActivateSimParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the activate sim params
func (o *ActivateSimParams) SetDeviceID(deviceID string) {
	o.DeviceID = deviceID
}

// WithUserID adds the userID to the activate sim params
func (o *ActivateSimParams) WithUserID(userID string) *ActivateSimParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the activate sim params
func (o *ActivateSimParams) SetUserID(userID string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *ActivateSimParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param deviceId
	if err := r.SetPathParam("deviceId", o.DeviceID); err != nil {
		return err
	}

	// path param userId
	if err := r.SetPathParam("userId", o.UserID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
