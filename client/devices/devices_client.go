// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new devices API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for devices API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ActivateSim(params *ActivateSimParams, authInfo runtime.ClientAuthInfoWriter) error

	ChangeCallerDisplayOfDevice(params *ChangeCallerDisplayOfDeviceParams, authInfo runtime.ClientAuthInfoWriter) error

	ChangeCallerIDSettings(params *ChangeCallerIDSettingsParams, authInfo runtime.ClientAuthInfoWriter) error

	ChangeDeviceAlias(params *ChangeDeviceAliasParams, authInfo runtime.ClientAuthInfoWriter) error

	ChangeDevicePassword(params *ChangeDevicePasswordParams, authInfo runtime.ClientAuthInfoWriter) error

	ChangeDeviceSettings(params *ChangeDeviceSettingsParams, authInfo runtime.ClientAuthInfoWriter) error

	ChangeLocalprefixSettings(params *ChangeLocalprefixSettingsParams, authInfo runtime.ClientAuthInfoWriter) error

	ChangeSingleRowDisplay(params *ChangeSingleRowDisplayParams, authInfo runtime.ClientAuthInfoWriter) error

	ChangeTargetNumberOfDevice(params *ChangeTargetNumberOfDeviceParams, authInfo runtime.ClientAuthInfoWriter) error

	ChangeTariffAnnouncement(params *ChangeTariffAnnouncementParams, authInfo runtime.ClientAuthInfoWriter) error

	CreateDevice(params *CreateDeviceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDeviceOK, error)

	CreateExternalDevice(params *CreateExternalDeviceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateExternalDeviceOK, error)

	CreateMobileDevice(params *CreateMobileDeviceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMobileDeviceOK, error)

	CreateRegisterDevice(params *CreateRegisterDeviceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRegisterDeviceOK, error)

	DeactivateSim(params *DeactivateSimParams, authInfo runtime.ClientAuthInfoWriter) error

	DeleteDevice(params *DeleteDeviceParams, authInfo runtime.ClientAuthInfoWriter) error

	GetCallerID(params *GetCallerIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCallerIDOK, error)

	GetDevice(params *GetDeviceParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeviceOK, error)

	GetDeviceContingents(params *GetDeviceContingentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeviceContingentsOK, error)

	GetDevices(params *GetDevicesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDevicesOK, error)

	GetLocalprefix(params *GetLocalprefixParams, authInfo runtime.ClientAuthInfoWriter) (*GetLocalprefixOK, error)

	GetSingleRowDisplay(params *GetSingleRowDisplayParams, authInfo runtime.ClientAuthInfoWriter) (*GetSingleRowDisplayOK, error)

	GetTariffAnnouncement(params *GetTariffAnnouncementParams, authInfo runtime.ClientAuthInfoWriter) (*GetTariffAnnouncementOK, error)

	OrderSim(params *OrderSimParams, authInfo runtime.ClientAuthInfoWriter) error

	SetTransport(transport runtime.ClientTransport)
}

/*
  ActivateSim activates a s i m card for a specific device
*/
func (a *Client) ActivateSim(params *ActivateSimParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivateSimParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "activateSim",
		Method:             "POST",
		PathPattern:        "/{userId}/devices/{deviceId}/sim",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActivateSimReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ChangeCallerDisplayOfDevice updates the incoming call display for an existing external device
*/
func (a *Client) ChangeCallerDisplayOfDevice(params *ChangeCallerDisplayOfDeviceParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeCallerDisplayOfDeviceParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeCallerDisplayOfDevice",
		Method:             "PUT",
		PathPattern:        "/devices/{deviceId}/external/incomingcalldisplay",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeCallerDisplayOfDeviceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ChangeCallerIDSettings updates the caller ID for an existing device
*/
func (a *Client) ChangeCallerIDSettings(params *ChangeCallerIDSettingsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeCallerIDSettingsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeCallerIdSettings",
		Method:             "PUT",
		PathPattern:        "/devices/{deviceId}/callerid",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeCallerIDSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ChangeDeviceAlias updates alias for an existing device
*/
func (a *Client) ChangeDeviceAlias(params *ChangeDeviceAliasParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeDeviceAliasParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeDeviceAlias",
		Method:             "PUT",
		PathPattern:        "/devices/{deviceId}/alias",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeDeviceAliasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ChangeDevicePassword changes password for an existing device
*/
func (a *Client) ChangeDevicePassword(params *ChangeDevicePasswordParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeDevicePasswordParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeDevicePassword",
		Method:             "POST",
		PathPattern:        "/devices/{deviceId}/credentials/password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeDevicePasswordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ChangeDeviceSettings updates settings for an existing device
*/
func (a *Client) ChangeDeviceSettings(params *ChangeDeviceSettingsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeDeviceSettingsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeDeviceSettings",
		Method:             "PUT",
		PathPattern:        "/devices/{deviceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeDeviceSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ChangeLocalprefixSettings updates the local prefix setting for an existing device
*/
func (a *Client) ChangeLocalprefixSettings(params *ChangeLocalprefixSettingsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeLocalprefixSettingsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeLocalprefixSettings",
		Method:             "PUT",
		PathPattern:        "/devices/{deviceId}/localprefix",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeLocalprefixSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ChangeSingleRowDisplay updates single row display setting for an existing device
*/
func (a *Client) ChangeSingleRowDisplay(params *ChangeSingleRowDisplayParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeSingleRowDisplayParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeSingleRowDisplay",
		Method:             "PUT",
		PathPattern:        "/devices/{deviceId}/singlerowdisplay",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeSingleRowDisplayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ChangeTargetNumberOfDevice updates the target phone number for an existing external device
*/
func (a *Client) ChangeTargetNumberOfDevice(params *ChangeTargetNumberOfDeviceParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeTargetNumberOfDeviceParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeTargetNumberOfDevice",
		Method:             "PUT",
		PathPattern:        "/devices/{deviceId}/external/targetnumber",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeTargetNumberOfDeviceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ChangeTariffAnnouncement updates tariff announcement setting for an existing device
*/
func (a *Client) ChangeTariffAnnouncement(params *ChangeTariffAnnouncementParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeTariffAnnouncementParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeTariffAnnouncement",
		Method:             "PUT",
		PathPattern:        "/devices/{deviceId}/tariffannouncement",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeTariffAnnouncementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  CreateDevice creates a new device

  If you want to create a new register device the Restriction CAN_CREATE_REGISTER_DEVICE needs to be true for the specified userId.
*/
func (a *Client) CreateDevice(params *CreateDeviceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDevice",
		Method:             "POST",
		PathPattern:        "/{userId}/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDeviceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateExternalDevice creates a new external device

  If you want to create a new external device the Restriction CAN_CREATE_EXTERNAL_DEVICE needs to be true for the specified userId.
*/
func (a *Client) CreateExternalDevice(params *CreateExternalDeviceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateExternalDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateExternalDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createExternalDevice",
		Method:             "POST",
		PathPattern:        "/{userId}/devices/external",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateExternalDeviceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateExternalDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createExternalDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateMobileDevice creates a new mobile device

  If you want to create a new mobile device the Restriction CAN_CREATE_MOBILE_DEVICE needs to be true for the specified userId.
*/
func (a *Client) CreateMobileDevice(params *CreateMobileDeviceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMobileDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMobileDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMobileDevice",
		Method:             "POST",
		PathPattern:        "/{userId}/devices/mobile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateMobileDeviceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMobileDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createMobileDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateRegisterDevice creates a new register device

  If you want to create a new register device the Restriction CAN_CREATE_REGISTER_DEVICE needs to be true for the specified userId.
*/
func (a *Client) CreateRegisterDevice(params *CreateRegisterDeviceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRegisterDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRegisterDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRegisterDevice",
		Method:             "POST",
		PathPattern:        "/{userId}/devices/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRegisterDeviceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRegisterDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRegisterDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeactivateSim deactivates the s i m card for a specific device
*/
func (a *Client) DeactivateSim(params *DeactivateSimParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeactivateSimParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deactivateSim",
		Method:             "DELETE",
		PathPattern:        "/{userId}/devices/{deviceId}/sim",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeactivateSimReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteDevice deletes an existing device
*/
func (a *Client) DeleteDevice(params *DeleteDeviceParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDeviceParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDevice",
		Method:             "DELETE",
		PathPattern:        "/devices/{deviceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDeviceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetCallerID gets the caller ID of a specific device
*/
func (a *Client) GetCallerID(params *GetCallerIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCallerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCallerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCallerId",
		Method:             "GET",
		PathPattern:        "/devices/{deviceId}/callerid",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCallerIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCallerIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCallerId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevice gets a specific device
*/
func (a *Client) GetDevice(params *GetDeviceParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeviceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDevice",
		Method:             "GET",
		PathPattern:        "/devices/{deviceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDeviceContingents lists all device contingents
*/
func (a *Client) GetDeviceContingents(params *GetDeviceContingentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeviceContingentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeviceContingentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeviceContingents",
		Method:             "GET",
		PathPattern:        "/{userId}/devices/{deviceId}/contingents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeviceContingentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeviceContingentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeviceContingents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevices lists all devices
*/
func (a *Client) GetDevices(params *GetDevicesParams, authInfo runtime.ClientAuthInfoWriter) (*GetDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDevices",
		Method:             "GET",
		PathPattern:        "/{userId}/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDevicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLocalprefix gets the local prefix setting of a specific device
*/
func (a *Client) GetLocalprefix(params *GetLocalprefixParams, authInfo runtime.ClientAuthInfoWriter) (*GetLocalprefixOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLocalprefixParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLocalprefix",
		Method:             "GET",
		PathPattern:        "/devices/{deviceId}/localprefix",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLocalprefixReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLocalprefixOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLocalprefix: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSingleRowDisplay gets single row display setting of a specific device
*/
func (a *Client) GetSingleRowDisplay(params *GetSingleRowDisplayParams, authInfo runtime.ClientAuthInfoWriter) (*GetSingleRowDisplayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSingleRowDisplayParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSingleRowDisplay",
		Method:             "GET",
		PathPattern:        "/devices/{deviceId}/singlerowdisplay",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSingleRowDisplayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSingleRowDisplayOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSingleRowDisplay: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTariffAnnouncement gets tariff announcement setting of a specific device
*/
func (a *Client) GetTariffAnnouncement(params *GetTariffAnnouncementParams, authInfo runtime.ClientAuthInfoWriter) (*GetTariffAnnouncementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTariffAnnouncementParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTariffAnnouncement",
		Method:             "GET",
		PathPattern:        "/devices/{deviceId}/tariffannouncement",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTariffAnnouncementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTariffAnnouncementOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTariffAnnouncement: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OrderSim orders a new s i m card for a specific device
*/
func (a *Client) OrderSim(params *OrderSimParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderSimParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "orderSim",
		Method:             "POST",
		PathPattern:        "/{userId}/devices/{deviceId}/sim/orders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OrderSimReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
