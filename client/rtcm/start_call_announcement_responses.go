// Code generated by go-swagger; DO NOT EDIT.

package rtcm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// StartCallAnnouncementReader is a Reader for the StartCallAnnouncement structure.
type StartCallAnnouncementReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StartCallAnnouncementReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewStartCallAnnouncementNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewStartCallAnnouncementNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewStartCallAnnouncementNoContent creates a StartCallAnnouncementNoContent with default headers values
func NewStartCallAnnouncementNoContent() *StartCallAnnouncementNoContent {
	return &StartCallAnnouncementNoContent{}
}

/*StartCallAnnouncementNoContent handles this case with default header values.

Success
*/
type StartCallAnnouncementNoContent struct {
}

func (o *StartCallAnnouncementNoContent) Error() string {
	return fmt.Sprintf("[POST /calls/{callId}/announcements][%d] startCallAnnouncementNoContent ", 204)
}

func (o *StartCallAnnouncementNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartCallAnnouncementNotFound creates a StartCallAnnouncementNotFound with default headers values
func NewStartCallAnnouncementNotFound() *StartCallAnnouncementNotFound {
	return &StartCallAnnouncementNotFound{}
}

/*StartCallAnnouncementNotFound handles this case with default header values.

Call not found
*/
type StartCallAnnouncementNotFound struct {
}

func (o *StartCallAnnouncementNotFound) Error() string {
	return fmt.Sprintf("[POST /calls/{callId}/announcements][%d] startCallAnnouncementNotFound ", 404)
}

func (o *StartCallAnnouncementNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
