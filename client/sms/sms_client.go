// Code generated by go-swagger; DO NOT EDIT.

package sms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new sms API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sms API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddCallerID(params *AddCallerIDParams, authInfo runtime.ClientAuthInfoWriter) error

	DeleteSmsCallerID(params *DeleteSmsCallerIDParams, authInfo runtime.ClientAuthInfoWriter) error

	EditCallerID(params *EditCallerIDParams, authInfo runtime.ClientAuthInfoWriter) error

	GetSmsCallerIds(params *GetSmsCallerIdsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSmsCallerIdsOK, error)

	GetSmsExtensions(params *GetSmsExtensionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSmsExtensionsOK, error)

	SetSmsAlias(params *SetSmsAliasParams, authInfo runtime.ClientAuthInfoWriter) error

	VerifyCallerID(params *VerifyCallerIDParams, authInfo runtime.ClientAuthInfoWriter) error

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddCallerID creates a new caller ID for an existing short message service
*/
func (a *Client) AddCallerID(params *AddCallerIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddCallerIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addCallerId",
		Method:             "POST",
		PathPattern:        "/{userId}/sms/{smsId}/callerids",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddCallerIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteSmsCallerID deletes an existing caller ID for a specific short message service
*/
func (a *Client) DeleteSmsCallerID(params *DeleteSmsCallerIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSmsCallerIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSmsCallerId",
		Method:             "DELETE",
		PathPattern:        "/{userId}/sms/{smsId}/callerids/{callerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSmsCallerIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  EditCallerID updates the caller ID for an existing short message service
*/
func (a *Client) EditCallerID(params *EditCallerIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEditCallerIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "editCallerId",
		Method:             "PUT",
		PathPattern:        "/{userId}/sms/{smsId}/callerids/{callerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EditCallerIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetSmsCallerIds lists all caller i ds for a specific short message service
*/
func (a *Client) GetSmsCallerIds(params *GetSmsCallerIdsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSmsCallerIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSmsCallerIdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSmsCallerIds",
		Method:             "GET",
		PathPattern:        "/{userId}/sms/{smsId}/callerids",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSmsCallerIdsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSmsCallerIdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSmsCallerIds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSmsExtensions lists all short message services
*/
func (a *Client) GetSmsExtensions(params *GetSmsExtensionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSmsExtensionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSmsExtensionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSmsExtensions",
		Method:             "GET",
		PathPattern:        "/{userId}/sms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSmsExtensionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSmsExtensionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSmsExtensions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetSmsAlias updates alias for an existing short message service
*/
func (a *Client) SetSmsAlias(params *SetSmsAliasParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetSmsAliasParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setSmsAlias",
		Method:             "PUT",
		PathPattern:        "/{userId}/sms/{smsId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetSmsAliasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  VerifyCallerID verifies an existing caller ID for a specific short message service
*/
func (a *Client) VerifyCallerID(params *VerifyCallerIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerifyCallerIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "verifyCallerId",
		Method:             "POST",
		PathPattern:        "/{userId}/sms/{smsId}/callerids/{callerId}/verification",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VerifyCallerIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
