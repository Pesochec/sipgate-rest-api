// Code generated by go-swagger; DO NOT EDIT.

package sessions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kben/sipgate-rest-api/models"
)

// PlayRecordingReader is a Reader for the PlayRecording structure.
type PlayRecordingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PlayRecordingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPlayRecordingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPlayRecordingBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 402:
		result := NewPlayRecordingPaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPlayRecordingForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPlayRecordingOK creates a PlayRecordingOK with default headers values
func NewPlayRecordingOK() *PlayRecordingOK {
	return &PlayRecordingOK{}
}

/*PlayRecordingOK handles this case with default header values.

successful operation
*/
type PlayRecordingOK struct {
	Payload *models.InitiateNewCallSessionResponse
}

func (o *PlayRecordingOK) Error() string {
	return fmt.Sprintf("[POST /sessions/voicemail/play][%d] playRecordingOK  %+v", 200, o.Payload)
}

func (o *PlayRecordingOK) GetPayload() *models.InitiateNewCallSessionResponse {
	return o.Payload
}

func (o *PlayRecordingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InitiateNewCallSessionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPlayRecordingBadRequest creates a PlayRecordingBadRequest with default headers values
func NewPlayRecordingBadRequest() *PlayRecordingBadRequest {
	return &PlayRecordingBadRequest{}
}

/*PlayRecordingBadRequest handles this case with default header values.

User supplied invalid callee number<br>User supplied invalid caller number<br>DeviceId is required if caller is a phone number
*/
type PlayRecordingBadRequest struct {
}

func (o *PlayRecordingBadRequest) Error() string {
	return fmt.Sprintf("[POST /sessions/voicemail/play][%d] playRecordingBadRequest ", 400)
}

func (o *PlayRecordingBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPlayRecordingPaymentRequired creates a PlayRecordingPaymentRequired with default headers values
func NewPlayRecordingPaymentRequired() *PlayRecordingPaymentRequired {
	return &PlayRecordingPaymentRequired{}
}

/*PlayRecordingPaymentRequired handles this case with default header values.

Insufficient funds
*/
type PlayRecordingPaymentRequired struct {
}

func (o *PlayRecordingPaymentRequired) Error() string {
	return fmt.Sprintf("[POST /sessions/voicemail/play][%d] playRecordingPaymentRequired ", 402)
}

func (o *PlayRecordingPaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPlayRecordingForbidden creates a PlayRecordingForbidden with default headers values
func NewPlayRecordingForbidden() *PlayRecordingForbidden {
	return &PlayRecordingForbidden{}
}

/*PlayRecordingForbidden handles this case with default header values.

User is not allowed to initiate call with given parameters
*/
type PlayRecordingForbidden struct {
}

func (o *PlayRecordingForbidden) Error() string {
	return fmt.Sprintf("[POST /sessions/voicemail/play][%d] playRecordingForbidden ", 403)
}

func (o *PlayRecordingForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
