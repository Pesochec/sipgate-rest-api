// Code generated by go-swagger; DO NOT EDIT.

package sessions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new sessions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sessions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	NewCall(params *NewCallParams, authInfo runtime.ClientAuthInfoWriter) (*NewCallOK, error)

	NewIvrRecording(params *NewIvrRecordingParams, authInfo runtime.ClientAuthInfoWriter) (*NewIvrRecordingOK, error)

	NewRecording(params *NewRecordingParams, authInfo runtime.ClientAuthInfoWriter) (*NewRecordingOK, error)

	PlayRecording(params *PlayRecordingParams, authInfo runtime.ClientAuthInfoWriter) (*PlayRecordingOK, error)

	ResendFax(params *ResendFaxParams, authInfo runtime.ClientAuthInfoWriter) error

	SendFax(params *SendFaxParams, authInfo runtime.ClientAuthInfoWriter) (*SendFaxOK, error)

	SendWebSms(params *SendWebSmsParams, authInfo runtime.ClientAuthInfoWriter) error

	SetTransport(transport runtime.ClientTransport)
}

/*
  NewCall initiates a new call

  DeviceId is only required if the caller parameter is a phone number and not a deviceId itself.<br>Use callerId to set a custom number that will be displayed to the callee.
*/
func (a *Client) NewCall(params *NewCallParams, authInfo runtime.ClientAuthInfoWriter) (*NewCallOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNewCallParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "newCall",
		Method:             "POST",
		PathPattern:        "/sessions/calls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NewCallReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NewCallOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for newCall: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NewIvrRecording initiates a new call to record an ivr message
*/
func (a *Client) NewIvrRecording(params *NewIvrRecordingParams, authInfo runtime.ClientAuthInfoWriter) (*NewIvrRecordingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNewIvrRecordingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "newIvrRecording",
		Method:             "POST",
		PathPattern:        "/sessions/ivr/recording",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NewIvrRecordingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NewIvrRecordingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for newIvrRecording: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  NewRecording initiates a new call to record a greeting
*/
func (a *Client) NewRecording(params *NewRecordingParams, authInfo runtime.ClientAuthInfoWriter) (*NewRecordingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNewRecordingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "newRecording",
		Method:             "POST",
		PathPattern:        "/sessions/voicemail/recording",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &NewRecordingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*NewRecordingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for newRecording: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PlayRecording initiates a new call to playback a voicemail
*/
func (a *Client) PlayRecording(params *PlayRecordingParams, authInfo runtime.ClientAuthInfoWriter) (*PlayRecordingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPlayRecordingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "playRecording",
		Method:             "POST",
		PathPattern:        "/sessions/voicemail/play",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PlayRecordingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PlayRecordingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for playRecording: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResendFax resends a fa x
*/
func (a *Client) ResendFax(params *ResendFaxParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResendFaxParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resendFax",
		Method:             "POST",
		PathPattern:        "/sessions/fax/resend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResendFaxReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  SendFax sends a fax
*/
func (a *Client) SendFax(params *SendFaxParams, authInfo runtime.ClientAuthInfoWriter) (*SendFaxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendFaxParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sendFax",
		Method:             "POST",
		PathPattern:        "/sessions/fax",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SendFaxReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SendFaxOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sendFax: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SendWebSms sends a text message
*/
func (a *Client) SendWebSms(params *SendWebSmsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendWebSmsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sendWebSms",
		Method:             "POST",
		PathPattern:        "/sessions/sms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SendWebSmsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
