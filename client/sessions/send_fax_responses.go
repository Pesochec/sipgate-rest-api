// Code generated by go-swagger; DO NOT EDIT.

package sessions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kben/sipgate-rest-api/models"
)

// SendFaxReader is a Reader for the SendFax structure.
type SendFaxReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SendFaxReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSendFaxOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 402:
		result := NewSendFaxPaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSendFaxOK creates a SendFaxOK with default headers values
func NewSendFaxOK() *SendFaxOK {
	return &SendFaxOK{}
}

/*SendFaxOK handles this case with default header values.

successful operation
*/
type SendFaxOK struct {
	Payload *models.SendFaxSessionResponse
}

func (o *SendFaxOK) Error() string {
	return fmt.Sprintf("[POST /sessions/fax][%d] sendFaxOK  %+v", 200, o.Payload)
}

func (o *SendFaxOK) GetPayload() *models.SendFaxSessionResponse {
	return o.Payload
}

func (o *SendFaxOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SendFaxSessionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendFaxPaymentRequired creates a SendFaxPaymentRequired with default headers values
func NewSendFaxPaymentRequired() *SendFaxPaymentRequired {
	return &SendFaxPaymentRequired{}
}

/*SendFaxPaymentRequired handles this case with default header values.

Insufficient funds
*/
type SendFaxPaymentRequired struct {
}

func (o *SendFaxPaymentRequired) Error() string {
	return fmt.Sprintf("[POST /sessions/fax][%d] sendFaxPaymentRequired ", 402)
}

func (o *SendFaxPaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
