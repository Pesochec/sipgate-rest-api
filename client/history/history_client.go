// Code generated by go-swagger; DO NOT EDIT.

package history

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new history API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for history API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteHistoryEntries(params *DeleteHistoryEntriesParams, authInfo runtime.ClientAuthInfoWriter) error

	DeleteHistoryEntry(params *DeleteHistoryEntryParams, authInfo runtime.ClientAuthInfoWriter) error

	GetHistory(params *GetHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetHistoryOK, error)

	GetHistoryByID(params *GetHistoryByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetHistoryByIDOK, error)

	GetHistoryCSV(params *GetHistoryCSVParams, authInfo runtime.ClientAuthInfoWriter) (*GetHistoryCSVOK, error)

	SetArchive(params *SetArchiveParams, authInfo runtime.ClientAuthInfoWriter) error

	SetHistoryEntryNote(params *SetHistoryEntryNoteParams, authInfo runtime.ClientAuthInfoWriter) (*SetHistoryEntryNoteOK, error)

	SetReadProperty(params *SetReadPropertyParams, authInfo runtime.ClientAuthInfoWriter) error

	UpdateHistoryEntries(params *UpdateHistoryEntriesParams, authInfo runtime.ClientAuthInfoWriter) error

	UpdateHistoryEntry(params *UpdateHistoryEntryParams, authInfo runtime.ClientAuthInfoWriter) error

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteHistoryEntries deletes multiple calls faxes s m s or voicemails
*/
func (a *Client) DeleteHistoryEntries(params *DeleteHistoryEntriesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHistoryEntriesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteHistoryEntries",
		Method:             "DELETE",
		PathPattern:        "/history",
		ProducesMediaTypes: []string{"application/json", "application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteHistoryEntriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteHistoryEntry deletes a call fax s m s or voicemail
*/
func (a *Client) DeleteHistoryEntry(params *DeleteHistoryEntryParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHistoryEntryParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteHistoryEntry",
		Method:             "DELETE",
		PathPattern:        "/history/{entryId}",
		ProducesMediaTypes: []string{"application/json", "application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteHistoryEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetHistory lists all calls faxes s m s and voicemails
*/
func (a *Client) GetHistory(params *GetHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getHistory",
		Method:             "GET",
		PathPattern:        "/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetHistoryByID gets a specific call fax s m s or voicemail
*/
func (a *Client) GetHistoryByID(params *GetHistoryByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetHistoryByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHistoryByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getHistoryById",
		Method:             "GET",
		PathPattern:        "/history/{entryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHistoryByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHistoryByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHistoryById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetHistoryCSV lists all calls faxes s m s and voicemails as csv
*/
func (a *Client) GetHistoryCSV(params *GetHistoryCSVParams, authInfo runtime.ClientAuthInfoWriter) (*GetHistoryCSVOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHistoryCSVParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getHistoryCSV",
		Method:             "GET",
		PathPattern:        "/history/export",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHistoryCSVReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHistoryCSVOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHistoryCSV: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetArchive archives a specific entry
*/
func (a *Client) SetArchive(params *SetArchiveParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetArchiveParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setArchive",
		Method:             "PUT",
		PathPattern:        "/history/{entryId}/archive",
		ProducesMediaTypes: []string{"application/json", "application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetArchiveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  SetHistoryEntryNote gets a specific call fax s m s or voicemail
*/
func (a *Client) SetHistoryEntryNote(params *SetHistoryEntryNoteParams, authInfo runtime.ClientAuthInfoWriter) (*SetHistoryEntryNoteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetHistoryEntryNoteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setHistoryEntryNote",
		Method:             "PUT",
		PathPattern:        "/history/{entryId}/note",
		ProducesMediaTypes: []string{"application/json", "application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetHistoryEntryNoteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetHistoryEntryNoteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setHistoryEntryNote: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetReadProperty marks an specific entry as read or unread
*/
func (a *Client) SetReadProperty(params *SetReadPropertyParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetReadPropertyParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setReadProperty",
		Method:             "PUT",
		PathPattern:        "/history/{entryId}/read",
		ProducesMediaTypes: []string{"application/json", "application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetReadPropertyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  UpdateHistoryEntries updates multiple calls faxes s m s or voicemails
*/
func (a *Client) UpdateHistoryEntries(params *UpdateHistoryEntriesParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateHistoryEntriesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateHistoryEntries",
		Method:             "PUT",
		PathPattern:        "/history",
		ProducesMediaTypes: []string{"application/json", "application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateHistoryEntriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  UpdateHistoryEntry updates a specific call fax s m s or voicemail
*/
func (a *Client) UpdateHistoryEntry(params *UpdateHistoryEntryParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateHistoryEntryParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateHistoryEntry",
		Method:             "PUT",
		PathPattern:        "/history/{entryId}",
		ProducesMediaTypes: []string{"application/json", "application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateHistoryEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
