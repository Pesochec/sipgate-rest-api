// Code generated by go-swagger; DO NOT EDIT.

package blacklist

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kben/sipgate-rest-api/models"
)

// AddIncomingEntryReader is a Reader for the AddIncomingEntry structure.
type AddIncomingEntryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddIncomingEntryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddIncomingEntryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewAddIncomingEntryCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddIncomingEntryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewAddIncomingEntryConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddIncomingEntryOK creates a AddIncomingEntryOK with default headers values
func NewAddIncomingEntryOK() *AddIncomingEntryOK {
	return &AddIncomingEntryOK{}
}

/*AddIncomingEntryOK handles this case with default header values.

successful operation
*/
type AddIncomingEntryOK struct {
	Payload *models.IncomingEntry
}

func (o *AddIncomingEntryOK) Error() string {
	return fmt.Sprintf("[POST /blacklist/incoming][%d] addIncomingEntryOK  %+v", 200, o.Payload)
}

func (o *AddIncomingEntryOK) GetPayload() *models.IncomingEntry {
	return o.Payload
}

func (o *AddIncomingEntryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IncomingEntry)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddIncomingEntryCreated creates a AddIncomingEntryCreated with default headers values
func NewAddIncomingEntryCreated() *AddIncomingEntryCreated {
	return &AddIncomingEntryCreated{}
}

/*AddIncomingEntryCreated handles this case with default header values.

successful operation
*/
type AddIncomingEntryCreated struct {
	Payload *models.IncomingEntry
}

func (o *AddIncomingEntryCreated) Error() string {
	return fmt.Sprintf("[POST /blacklist/incoming][%d] addIncomingEntryCreated  %+v", 201, o.Payload)
}

func (o *AddIncomingEntryCreated) GetPayload() *models.IncomingEntry {
	return o.Payload
}

func (o *AddIncomingEntryCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IncomingEntry)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddIncomingEntryBadRequest creates a AddIncomingEntryBadRequest with default headers values
func NewAddIncomingEntryBadRequest() *AddIncomingEntryBadRequest {
	return &AddIncomingEntryBadRequest{}
}

/*AddIncomingEntryBadRequest handles this case with default header values.

Invalid phoneNumber supplied
*/
type AddIncomingEntryBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *AddIncomingEntryBadRequest) Error() string {
	return fmt.Sprintf("[POST /blacklist/incoming][%d] addIncomingEntryBadRequest  %+v", 400, o.Payload)
}

func (o *AddIncomingEntryBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddIncomingEntryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddIncomingEntryConflict creates a AddIncomingEntryConflict with default headers values
func NewAddIncomingEntryConflict() *AddIncomingEntryConflict {
	return &AddIncomingEntryConflict{}
}

/*AddIncomingEntryConflict handles this case with default header values.

IncomingEntry already exists
*/
type AddIncomingEntryConflict struct {
	Payload *models.ErrorResponse
}

func (o *AddIncomingEntryConflict) Error() string {
	return fmt.Sprintf("[POST /blacklist/incoming][%d] addIncomingEntryConflict  %+v", 409, o.Payload)
}

func (o *AddIncomingEntryConflict) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddIncomingEntryConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
