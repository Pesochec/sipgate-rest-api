// Code generated by go-swagger; DO NOT EDIT.

package contacts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new contacts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for contacts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateContact(params *CreateContactParams, authInfo runtime.ClientAuthInfoWriter) error

	DeleteAllContacts(params *DeleteAllContactsParams, authInfo runtime.ClientAuthInfoWriter) error

	DeleteContact(params *DeleteContactParams, authInfo runtime.ClientAuthInfoWriter) error

	GetAllContacts(params *GetAllContactsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllContactsOK, error)

	GetContacts(params *GetContactsParams, authInfo runtime.ClientAuthInfoWriter) (*GetContactsOK, error)

	ImportFromCSV(params *ImportFromCSVParams, authInfo runtime.ClientAuthInfoWriter) error

	ImportFromGoogle(params *ImportFromGoogleParams, authInfo runtime.ClientAuthInfoWriter) error

	UpdateContact(params *UpdateContactParams, authInfo runtime.ClientAuthInfoWriter) error

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateContact creates a contact
*/
func (a *Client) CreateContact(params *CreateContactParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateContactParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createContact",
		Method:             "POST",
		PathPattern:        "/contacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateContactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteAllContacts deletes all contacts
*/
func (a *Client) DeleteAllContacts(params *DeleteAllContactsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllContactsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAllContacts",
		Method:             "DELETE",
		PathPattern:        "/contacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAllContactsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteContact deletes a single contact
*/
func (a *Client) DeleteContact(params *DeleteContactParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteContactParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteContact",
		Method:             "DELETE",
		PathPattern:        "/contacts/{contactid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteContactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetAllContacts lists all account contacts
*/
func (a *Client) GetAllContacts(params *GetAllContactsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllContactsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllContactsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllContacts",
		Method:             "GET",
		PathPattern:        "/contacts/internal",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllContactsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllContactsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllContacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetContacts gets all contacts
*/
func (a *Client) GetContacts(params *GetContactsParams, authInfo runtime.ClientAuthInfoWriter) (*GetContactsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContactsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContacts",
		Method:             "GET",
		PathPattern:        "/contacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContactsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetContactsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getContacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImportFromCSV imports contacts from c s v file

  CSV files should match the following format:<br /><pre>firstname,lastname,number
Ada,Lovelace,+4915799912345
Alan,Turing,+4915799912345
</pre>
*/
func (a *Client) ImportFromCSV(params *ImportFromCSVParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportFromCSVParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "importFromCSV",
		Method:             "POST",
		PathPattern:        "/contacts/import/csv",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ImportFromCSVReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ImportFromGoogle imports contacts from google
*/
func (a *Client) ImportFromGoogle(params *ImportFromGoogleParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportFromGoogleParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "importFromGoogle",
		Method:             "POST",
		PathPattern:        "/contacts/import/google",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ImportFromGoogleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  UpdateContact updates a contact
*/
func (a *Client) UpdateContact(params *UpdateContactParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateContactParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateContact",
		Method:             "PUT",
		PathPattern:        "/contacts/{contactId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateContactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
