// Code generated by go-swagger; DO NOT EDIT.

package portings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new portings API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for portings API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetPorting(params *GetPortingParams, authInfo runtime.ClientAuthInfoWriter) (*GetPortingOK, error)

	GetPortings(params *GetPortingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPortingsOK, error)

	RevokePorting(params *RevokePortingParams, authInfo runtime.ClientAuthInfoWriter) (*RevokePortingOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetPorting gets an existing porting
*/
func (a *Client) GetPorting(params *GetPortingParams, authInfo runtime.ClientAuthInfoWriter) (*GetPortingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPortingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPorting",
		Method:             "GET",
		PathPattern:        "/portings/{portingId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPortingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPortingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPorting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPortings lists all phone number portings

  Possible status codes:<br /><pre>100: Waiting for user fax
150: WBCI waiting for mail opt-in
160: WBCI opt-in hash generated
170: WBCI opt-in link clicked
200: Waiting for fax from current network operator
250: WBCI send
251: WBCI network error
252: WBCI EKP rejected
400: Porting accepted
450: Waiting for data exchange
451: Data exchange error
500: Porting complete
600: Porting cancelled
</pre>
*/
func (a *Client) GetPortings(params *GetPortingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPortingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPortingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPortings",
		Method:             "GET",
		PathPattern:        "/portings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPortingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPortingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPortings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RevokePorting deletes revoke an existing porting
*/
func (a *Client) RevokePorting(params *RevokePortingParams, authInfo runtime.ClientAuthInfoWriter) (*RevokePortingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokePortingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "revokePorting",
		Method:             "DELETE",
		PathPattern:        "/portings/{portingId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RevokePortingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokePortingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokePorting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
