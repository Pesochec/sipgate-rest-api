// Code generated by go-swagger; DO NOT EDIT.

package numbers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new numbers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for numbers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddQuickDialNumber(params *AddQuickDialNumberParams, authInfo runtime.ClientAuthInfoWriter) error

	ChangeNumberSettings(params *ChangeNumberSettingsParams, authInfo runtime.ClientAuthInfoWriter) error

	ChangeQuickDialNumber(params *ChangeQuickDialNumberParams, authInfo runtime.ClientAuthInfoWriter) error

	DeleteQuickDialNumber(params *DeleteQuickDialNumberParams, authInfo runtime.ClientAuthInfoWriter) error

	GetNumbers(params *GetNumbersParams, authInfo runtime.ClientAuthInfoWriter) (*GetNumbersOK, error)

	GetUserNumbers(params *GetUserNumbersParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserNumbersOK, error)

	ValidateQuickDialNumber(params *ValidateQuickDialNumberParams, authInfo runtime.ClientAuthInfoWriter) error

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddQuickDialNumber adds a new quick dial number
*/
func (a *Client) AddQuickDialNumber(params *AddQuickDialNumberParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddQuickDialNumberParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addQuickDialNumber",
		Method:             "POST",
		PathPattern:        "/numbers/quickdial",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddQuickDialNumberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ChangeNumberSettings changes phone number settings e g route to endpoint
*/
func (a *Client) ChangeNumberSettings(params *ChangeNumberSettingsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeNumberSettingsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeNumberSettings",
		Method:             "PUT",
		PathPattern:        "/numbers/{numberId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeNumberSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ChangeQuickDialNumber updates an existing quick dial number
*/
func (a *Client) ChangeQuickDialNumber(params *ChangeQuickDialNumberParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeQuickDialNumberParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeQuickDialNumber",
		Method:             "PUT",
		PathPattern:        "/numbers/quickdial/{quickdialId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeQuickDialNumberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  DeleteQuickDialNumber deletes an existing quick dial number
*/
func (a *Client) DeleteQuickDialNumber(params *DeleteQuickDialNumberParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteQuickDialNumberParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteQuickDialNumber",
		Method:             "DELETE",
		PathPattern:        "/numbers/quickdial/{numberId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteQuickDialNumberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetNumbers lists all phone numbers

  Possible portState->status codes:<br /><pre>100: Waiting for user fax
150: WBCI waiting for mail opt-in
160: WBCI opt-in hash generated
170: WBCI opt-in link clicked
200: Waiting for fax from current network operator
250: WBCI send
251: WBCI network error
252: WBCI EKP rejected
400: Porting accepted
450: Waiting for data exchange
451: Data exchange error
500: Porting complete
600: Porting cancelled
</pre>
*/
func (a *Client) GetNumbers(params *GetNumbersParams, authInfo runtime.ClientAuthInfoWriter) (*GetNumbersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNumbersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNumbers",
		Method:             "GET",
		PathPattern:        "/numbers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNumbersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNumbersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNumbers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserNumbers lists all user phone numbers of a specific user

  Possible portState->status codes:<br /><pre>100: Waiting for user fax
150: WBCI waiting for mail opt-in
160: WBCI opt-in hash generated
170: WBCI opt-in link clicked
200: Waiting for fax from current network operator
250: WBCI send
251: WBCI network error
252: WBCI EKP rejected
400: Porting accepted
450: Waiting for data exchange
451: Data exchange error
500: Porting complete
600: Porting cancelled
</pre>
*/
func (a *Client) GetUserNumbers(params *GetUserNumbersParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserNumbersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserNumbersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserNumbers",
		Method:             "GET",
		PathPattern:        "/{userId}/numbers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserNumbersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserNumbersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserNumbers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateQuickDialNumber checks if quick dial number is already taken
*/
func (a *Client) ValidateQuickDialNumber(params *ValidateQuickDialNumberParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateQuickDialNumberParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateQuickDialNumber",
		Method:             "GET",
		PathPattern:        "/numbers/quickdial/validation/{quickDialNumber}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateQuickDialNumberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
