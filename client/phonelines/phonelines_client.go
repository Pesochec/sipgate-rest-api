// Code generated by go-swagger; DO NOT EDIT.

package phonelines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new phonelines API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for phonelines API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddDeviceToPhoneline(params *AddDeviceToPhonelineParams, authInfo runtime.ClientAuthInfoWriter) error

	AddGreeting(params *AddGreetingParams, authInfo runtime.ClientAuthInfoWriter) (*AddGreetingOK, error)

	AddParallelForwarding(params *AddParallelForwardingParams, authInfo runtime.ClientAuthInfoWriter) error

	ChangeParallelForwardingSettings(params *ChangeParallelForwardingSettingsParams, authInfo runtime.ClientAuthInfoWriter) error

	ChangePhonelineVoicemailGreeting(params *ChangePhonelineVoicemailGreetingParams, authInfo runtime.ClientAuthInfoWriter) error

	ChangePhonelineVoicemailTranscriptionSetting(params *ChangePhonelineVoicemailTranscriptionSettingParams, authInfo runtime.ClientAuthInfoWriter) error

	ChangeVoicemailSettings(params *ChangeVoicemailSettingsParams, authInfo runtime.ClientAuthInfoWriter) error

	CreatePhoneline(params *CreatePhonelineParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePhonelineOK, error)

	DeleteParallelForwardingSettings(params *DeleteParallelForwardingSettingsParams, authInfo runtime.ClientAuthInfoWriter) error

	DeletePhoneline(params *DeletePhonelineParams, authInfo runtime.ClientAuthInfoWriter) error

	DeletePhonlineVoicemailGreeting(params *DeletePhonlineVoicemailGreetingParams, authInfo runtime.ClientAuthInfoWriter) error

	GetBlockAnonymousSetting(params *GetBlockAnonymousSettingParams, authInfo runtime.ClientAuthInfoWriter) (*GetBlockAnonymousSettingOK, error)

	GetDevicesForPhoneline(params *GetDevicesForPhonelineParams, authInfo runtime.ClientAuthInfoWriter) (*GetDevicesForPhonelineOK, error)

	GetPhoneline(params *GetPhonelineParams, authInfo runtime.ClientAuthInfoWriter) (*GetPhonelineOK, error)

	GetPhonelineForwardings(params *GetPhonelineForwardingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPhonelineForwardingsOK, error)

	GetPhonelineNumbers(params *GetPhonelineNumbersParams, authInfo runtime.ClientAuthInfoWriter) (*GetPhonelineNumbersOK, error)

	GetPhonelineParallelForwardings(params *GetPhonelineParallelForwardingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPhonelineParallelForwardingsOK, error)

	GetPhonelineVoicemailGreetings(params *GetPhonelineVoicemailGreetingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPhonelineVoicemailGreetingsOK, error)

	GetPhonelines(params *GetPhonelinesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPhonelinesOK, error)

	GetSipgateIoLogs(params *GetSipgateIoLogsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSipgateIoLogsOK, error)

	GetSipgateIoSettings(params *GetSipgateIoSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSipgateIoSettingsOK, error)

	RemoveDeviceFromPhoneline(params *RemoveDeviceFromPhonelineParams, authInfo runtime.ClientAuthInfoWriter) error

	SetBlockAnonymousSetting(params *SetBlockAnonymousSettingParams, authInfo runtime.ClientAuthInfoWriter) (*SetBlockAnonymousSettingOK, error)

	SetPhonelineAlias(params *SetPhonelineAliasParams, authInfo runtime.ClientAuthInfoWriter) error

	SetPhonelineForwardingSettings(params *SetPhonelineForwardingSettingsParams, authInfo runtime.ClientAuthInfoWriter) error

	SetSipgateIoSettings(params *SetSipgateIoSettingsParams, authInfo runtime.ClientAuthInfoWriter) error

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddDeviceToPhoneline adds device to phone line
*/
func (a *Client) AddDeviceToPhoneline(params *AddDeviceToPhonelineParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDeviceToPhonelineParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addDeviceToPhoneline",
		Method:             "POST",
		PathPattern:        "/{userId}/phonelines/{phonelineId}/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddDeviceToPhonelineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  AddGreeting creates a new greeting for a specific phone line voicemail
*/
func (a *Client) AddGreeting(params *AddGreetingParams, authInfo runtime.ClientAuthInfoWriter) (*AddGreetingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddGreetingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addGreeting",
		Method:             "POST",
		PathPattern:        "/{userId}/phonelines/{phonelineId}/voicemails/{voicemailId}/greetings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddGreetingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddGreetingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addGreeting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddParallelForwarding creates parallel forwarding for an existing phone line
*/
func (a *Client) AddParallelForwarding(params *AddParallelForwardingParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddParallelForwardingParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addParallelForwarding",
		Method:             "POST",
		PathPattern:        "/{userId}/phonelines/{phonelineId}/parallelforwardings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddParallelForwardingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ChangeParallelForwardingSettings updates an existing parallel forwarding
*/
func (a *Client) ChangeParallelForwardingSettings(params *ChangeParallelForwardingSettingsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeParallelForwardingSettingsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeParallelForwardingSettings",
		Method:             "PUT",
		PathPattern:        "/{userId}/phonelines/{phonelineId}/parallelforwardings/{parallelForwardingId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeParallelForwardingSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ChangePhonelineVoicemailGreeting updates an existing phone line voicemail greeting
*/
func (a *Client) ChangePhonelineVoicemailGreeting(params *ChangePhonelineVoicemailGreetingParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangePhonelineVoicemailGreetingParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changePhonelineVoicemailGreeting",
		Method:             "PUT",
		PathPattern:        "/{userId}/phonelines/{phonelineId}/voicemails/{voicemailId}/greetings/{greetingId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangePhonelineVoicemailGreetingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ChangePhonelineVoicemailTranscriptionSetting updates an existing phone line voicemail transcription setting
*/
func (a *Client) ChangePhonelineVoicemailTranscriptionSetting(params *ChangePhonelineVoicemailTranscriptionSettingParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangePhonelineVoicemailTranscriptionSettingParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changePhonelineVoicemailTranscriptionSetting",
		Method:             "PUT",
		PathPattern:        "/{userId}/phonelines/{phonelineId}/voicemails/{voicemailId}/transcriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangePhonelineVoicemailTranscriptionSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ChangeVoicemailSettings updates voicemail settings for a specific phone line
*/
func (a *Client) ChangeVoicemailSettings(params *ChangeVoicemailSettingsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeVoicemailSettingsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeVoicemailSettings",
		Method:             "PUT",
		PathPattern:        "/{userId}/phonelines/{phonelineId}/voicemails/{voicemailId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeVoicemailSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  CreatePhoneline creates a new phone line
*/
func (a *Client) CreatePhoneline(params *CreatePhonelineParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePhonelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePhonelineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createPhoneline",
		Method:             "POST",
		PathPattern:        "/{userId}/phonelines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePhonelineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePhonelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createPhoneline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteParallelForwardingSettings deletes parallel forwarding
*/
func (a *Client) DeleteParallelForwardingSettings(params *DeleteParallelForwardingSettingsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteParallelForwardingSettingsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteParallelForwardingSettings",
		Method:             "DELETE",
		PathPattern:        "/{userId}/phonelines/{phonelineId}/parallelforwardings/{parallelForwardingId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteParallelForwardingSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  DeletePhoneline deletes an existing phone line
*/
func (a *Client) DeletePhoneline(params *DeletePhonelineParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePhonelineParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePhoneline",
		Method:             "DELETE",
		PathPattern:        "/{userId}/phonelines/{phonelineId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePhonelineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  DeletePhonlineVoicemailGreeting deletes an existing phone line voicemail greeting
*/
func (a *Client) DeletePhonlineVoicemailGreeting(params *DeletePhonlineVoicemailGreetingParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePhonlineVoicemailGreetingParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePhonlineVoicemailGreeting",
		Method:             "DELETE",
		PathPattern:        "/{userId}/phonelines/{phonelineId}/voicemails/{voicemailId}/greetings/{greetingId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePhonlineVoicemailGreetingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetBlockAnonymousSetting gets the block anonymous setting of a specific phone line
*/
func (a *Client) GetBlockAnonymousSetting(params *GetBlockAnonymousSettingParams, authInfo runtime.ClientAuthInfoWriter) (*GetBlockAnonymousSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlockAnonymousSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBlockAnonymousSetting",
		Method:             "GET",
		PathPattern:        "/{userId}/phonelines/{phonelineId}/blockanonymous",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBlockAnonymousSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBlockAnonymousSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBlockAnonymousSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDevicesForPhoneline lists all devices of a specific phone line
*/
func (a *Client) GetDevicesForPhoneline(params *GetDevicesForPhonelineParams, authInfo runtime.ClientAuthInfoWriter) (*GetDevicesForPhonelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDevicesForPhonelineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDevicesForPhoneline",
		Method:             "GET",
		PathPattern:        "/{userId}/phonelines/{phonelineId}/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDevicesForPhonelineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDevicesForPhonelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDevicesForPhoneline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPhoneline gets a single phoneline
*/
func (a *Client) GetPhoneline(params *GetPhonelineParams, authInfo runtime.ClientAuthInfoWriter) (*GetPhonelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPhonelineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPhoneline",
		Method:             "GET",
		PathPattern:        "/{userId}/phonelines/{phonelineId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPhonelineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPhonelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPhoneline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPhonelineForwardings lists all forwarding settings of a specific phone line
*/
func (a *Client) GetPhonelineForwardings(params *GetPhonelineForwardingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPhonelineForwardingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPhonelineForwardingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPhonelineForwardings",
		Method:             "GET",
		PathPattern:        "/{userId}/phonelines/{phonelineId}/forwardings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPhonelineForwardingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPhonelineForwardingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPhonelineForwardings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPhonelineNumbers lists all phone numbers routed to phone line
*/
func (a *Client) GetPhonelineNumbers(params *GetPhonelineNumbersParams, authInfo runtime.ClientAuthInfoWriter) (*GetPhonelineNumbersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPhonelineNumbersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPhonelineNumbers",
		Method:             "GET",
		PathPattern:        "/{userId}/phonelines/{phonelineId}/numbers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPhonelineNumbersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPhonelineNumbersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPhonelineNumbers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPhonelineParallelForwardings lists all parallel forwardings of a specific phone line
*/
func (a *Client) GetPhonelineParallelForwardings(params *GetPhonelineParallelForwardingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPhonelineParallelForwardingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPhonelineParallelForwardingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPhonelineParallelForwardings",
		Method:             "GET",
		PathPattern:        "/{userId}/phonelines/{phonelineId}/parallelforwardings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPhonelineParallelForwardingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPhonelineParallelForwardingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPhonelineParallelForwardings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPhonelineVoicemailGreetings lists all greetings for a specific phone line voicemail
*/
func (a *Client) GetPhonelineVoicemailGreetings(params *GetPhonelineVoicemailGreetingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPhonelineVoicemailGreetingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPhonelineVoicemailGreetingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPhonelineVoicemailGreetings",
		Method:             "GET",
		PathPattern:        "/{userId}/phonelines/{phonelineId}/voicemails/{voicemailId}/greetings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPhonelineVoicemailGreetingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPhonelineVoicemailGreetingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPhonelineVoicemailGreetings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPhonelines lists all phone lines
*/
func (a *Client) GetPhonelines(params *GetPhonelinesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPhonelinesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPhonelinesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPhonelines",
		Method:             "GET",
		PathPattern:        "/{userId}/phonelines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPhonelinesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPhonelinesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPhonelines: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSipgateIoLogs lists sipgate io debug log for a specific phone line
*/
func (a *Client) GetSipgateIoLogs(params *GetSipgateIoLogsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSipgateIoLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSipgateIoLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSipgateIoLogs",
		Method:             "GET",
		PathPattern:        "/{userId}/phonelines/{phonelineId}/sipgateio/log",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSipgateIoLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSipgateIoLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSipgateIoLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSipgateIoSettings lists sipgate io settings of a specific phone line
*/
func (a *Client) GetSipgateIoSettings(params *GetSipgateIoSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSipgateIoSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSipgateIoSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSipgateIoSettings",
		Method:             "GET",
		PathPattern:        "/{userId}/phonelines/{phonelineId}/sipgateio",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSipgateIoSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSipgateIoSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSipgateIoSettings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveDeviceFromPhoneline removes device from phone line
*/
func (a *Client) RemoveDeviceFromPhoneline(params *RemoveDeviceFromPhonelineParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveDeviceFromPhonelineParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeDeviceFromPhoneline",
		Method:             "DELETE",
		PathPattern:        "/{userId}/phonelines/{phonelineId}/devices/{deviceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveDeviceFromPhonelineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  SetBlockAnonymousSetting updates the block anonymous setting for an existing phone line
*/
func (a *Client) SetBlockAnonymousSetting(params *SetBlockAnonymousSettingParams, authInfo runtime.ClientAuthInfoWriter) (*SetBlockAnonymousSettingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetBlockAnonymousSettingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setBlockAnonymousSetting",
		Method:             "PUT",
		PathPattern:        "/{userId}/phonelines/{phonelineId}/blockanonymous",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetBlockAnonymousSettingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetBlockAnonymousSettingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setBlockAnonymousSetting: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetPhonelineAlias updates alias for an existing phone line
*/
func (a *Client) SetPhonelineAlias(params *SetPhonelineAliasParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetPhonelineAliasParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setPhonelineAlias",
		Method:             "PUT",
		PathPattern:        "/{userId}/phonelines/{phonelineId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetPhonelineAliasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  SetPhonelineForwardingSettings updates forwarding settings for an existing phone line
*/
func (a *Client) SetPhonelineForwardingSettings(params *SetPhonelineForwardingSettingsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetPhonelineForwardingSettingsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setPhonelineForwardingSettings",
		Method:             "PUT",
		PathPattern:        "/{userId}/phonelines/{phonelineId}/forwardings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetPhonelineForwardingSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  SetSipgateIoSettings updates sipgate io settings for an existing phone line
*/
func (a *Client) SetSipgateIoSettings(params *SetSipgateIoSettingsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetSipgateIoSettingsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setSipgateIoSettings",
		Method:             "PUT",
		PathPattern:        "/{userId}/phonelines/{phonelineId}/sipgateio",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetSipgateIoSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
