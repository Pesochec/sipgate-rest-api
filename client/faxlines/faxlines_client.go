// Code generated by go-swagger; DO NOT EDIT.

package faxlines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new faxlines API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for faxlines API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ChangeFaxlineAlias(params *ChangeFaxlineAliasParams, authInfo runtime.ClientAuthInfoWriter) error

	ChangeFaxlineCallerIDSettings(params *ChangeFaxlineCallerIDSettingsParams, authInfo runtime.ClientAuthInfoWriter) error

	ChangeTagline(params *ChangeTaglineParams, authInfo runtime.ClientAuthInfoWriter) error

	CreateFaxline(params *CreateFaxlineParams, authInfo runtime.ClientAuthInfoWriter) (*CreateFaxlineOK, error)

	DeleteFaxline(params *DeleteFaxlineParams, authInfo runtime.ClientAuthInfoWriter) error

	GetFaxlineCallerID(params *GetFaxlineCallerIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetFaxlineCallerIDOK, error)

	GetFaxlineNumbers(params *GetFaxlineNumbersParams, authInfo runtime.ClientAuthInfoWriter) (*GetFaxlineNumbersOK, error)

	GetUserFaxlines(params *GetUserFaxlinesParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserFaxlinesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ChangeFaxlineAlias updates alias for an existing fax line
*/
func (a *Client) ChangeFaxlineAlias(params *ChangeFaxlineAliasParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeFaxlineAliasParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeFaxlineAlias",
		Method:             "PUT",
		PathPattern:        "/{userId}/faxlines/{faxlineId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeFaxlineAliasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ChangeFaxlineCallerIDSettings updates the caller ID for an existing fax line
*/
func (a *Client) ChangeFaxlineCallerIDSettings(params *ChangeFaxlineCallerIDSettingsParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeFaxlineCallerIDSettingsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeFaxlineCallerIdSettings",
		Method:             "PUT",
		PathPattern:        "/{userId}/faxlines/{faxlineId}/callerid",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeFaxlineCallerIDSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  ChangeTagline updates tagline of an existing fax line
*/
func (a *Client) ChangeTagline(params *ChangeTaglineParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeTaglineParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeTagline",
		Method:             "PUT",
		PathPattern:        "/{userId}/faxlines/{faxlineId}/tagline",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeTaglineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  CreateFaxline creates a new fax line
*/
func (a *Client) CreateFaxline(params *CreateFaxlineParams, authInfo runtime.ClientAuthInfoWriter) (*CreateFaxlineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFaxlineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createFaxline",
		Method:             "POST",
		PathPattern:        "/{userId}/faxlines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateFaxlineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateFaxlineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createFaxline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteFaxline deletes an existing fax line
*/
func (a *Client) DeleteFaxline(params *DeleteFaxlineParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFaxlineParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteFaxline",
		Method:             "DELETE",
		PathPattern:        "/{userId}/faxlines/{faxlineId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFaxlineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  GetFaxlineCallerID gets the caller ID of a specific fax line
*/
func (a *Client) GetFaxlineCallerID(params *GetFaxlineCallerIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetFaxlineCallerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFaxlineCallerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFaxlineCallerId",
		Method:             "GET",
		PathPattern:        "/{userId}/faxlines/{faxlineId}/callerid",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFaxlineCallerIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFaxlineCallerIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFaxlineCallerId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFaxlineNumbers lists all phone numbers routed to fax line
*/
func (a *Client) GetFaxlineNumbers(params *GetFaxlineNumbersParams, authInfo runtime.ClientAuthInfoWriter) (*GetFaxlineNumbersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFaxlineNumbersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFaxlineNumbers",
		Method:             "GET",
		PathPattern:        "/{userId}/faxlines/{faxlineId}/numbers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFaxlineNumbersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFaxlineNumbersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFaxlineNumbers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetUserFaxlines lists all fax lines
*/
func (a *Client) GetUserFaxlines(params *GetUserFaxlinesParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserFaxlinesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserFaxlinesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserFaxlines",
		Method:             "GET",
		PathPattern:        "/{userId}/faxlines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserFaxlinesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserFaxlinesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserFaxlines: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
