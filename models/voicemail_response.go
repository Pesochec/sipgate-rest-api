// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VoicemailResponse voicemail response
//
// swagger:model VoicemailResponse
type VoicemailResponse struct {

	// access number
	AccessNumber string `json:"accessNumber,omitempty"`

	// active greeting alias
	ActiveGreetingAlias string `json:"activeGreetingAlias,omitempty"`

	// active greeting Id
	ActiveGreetingID string `json:"activeGreetingId,omitempty"`

	// alias
	Alias string `json:"alias,omitempty"`

	// belongs to endpoint
	BelongsToEndpoint *EndpointResponse `json:"belongsToEndpoint,omitempty"`

	// can transcribe
	CanTranscribe *bool `json:"canTranscribe,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// transcription
	Transcription *bool `json:"transcription,omitempty"`
}

// Validate validates this voicemail response
func (m *VoicemailResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBelongsToEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VoicemailResponse) validateBelongsToEndpoint(formats strfmt.Registry) error {

	if swag.IsZero(m.BelongsToEndpoint) { // not required
		return nil
	}

	if m.BelongsToEndpoint != nil {
		if err := m.BelongsToEndpoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("belongsToEndpoint")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VoicemailResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VoicemailResponse) UnmarshalBinary(b []byte) error {
	var res VoicemailResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
