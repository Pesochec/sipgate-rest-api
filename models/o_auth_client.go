// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OAuthClient OAuthClient
//
// swagger:model OAuthClient
type OAuthClient struct {

	// The unique OAuth 2.0 client identifier
	// Required: true
	ClientID *string `json:"clientId"`

	// The OAuth 2.0 client secret
	// Required: true
	ClientSecret *string `json:"clientSecret"`

	// Short description of the application the client is intended to use with
	// Required: true
	Description *string `json:"description"`

	// Name of the application the client is intended to use with
	// Required: true
	Name *string `json:"name"`

	// The privacy policy URL
	// Required: true
	PrivacyURL *string `json:"privacyUrl"`

	// Valid URI pattern a browser can redirect to after a successful login or logout (simple wildcards are allowed e.g. 'http://example.com/*')
	// Required: true
	RedirectUris []string `json:"redirectUris"`

	// The terms and conditions URL
	// Required: true
	TermsURL *string `json:"termsUrl"`

	// Allowed CORS origins (simple wildcards are allowed e.g. 'http://*.example.com')
	// Required: true
	WebOrigins []string `json:"webOrigins"`
}

// Validate validates this o auth client
func (m *OAuthClient) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivacyURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedirectUris(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTermsURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebOrigins(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OAuthClient) validateClientID(formats strfmt.Registry) error {

	if err := validate.Required("clientId", "body", m.ClientID); err != nil {
		return err
	}

	return nil
}

func (m *OAuthClient) validateClientSecret(formats strfmt.Registry) error {

	if err := validate.Required("clientSecret", "body", m.ClientSecret); err != nil {
		return err
	}

	return nil
}

func (m *OAuthClient) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *OAuthClient) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *OAuthClient) validatePrivacyURL(formats strfmt.Registry) error {

	if err := validate.Required("privacyUrl", "body", m.PrivacyURL); err != nil {
		return err
	}

	return nil
}

func (m *OAuthClient) validateRedirectUris(formats strfmt.Registry) error {

	if err := validate.Required("redirectUris", "body", m.RedirectUris); err != nil {
		return err
	}

	return nil
}

func (m *OAuthClient) validateTermsURL(formats strfmt.Registry) error {

	if err := validate.Required("termsUrl", "body", m.TermsURL); err != nil {
		return err
	}

	return nil
}

func (m *OAuthClient) validateWebOrigins(formats strfmt.Registry) error {

	if err := validate.Required("webOrigins", "body", m.WebOrigins); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OAuthClient) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OAuthClient) UnmarshalBinary(b []byte) error {
	var res OAuthClient
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
