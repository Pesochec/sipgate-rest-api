// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceResponse device response
//
// swagger:model DeviceResponse
type DeviceResponse struct {

	// active groups
	ActiveGroups []*ActiveRouting `json:"activeGroups"`

	// active phonelines
	ActivePhonelines []*ActiveRouting `json:"activePhonelines"`

	// alias
	Alias string `json:"alias,omitempty"`

	// dnd
	Dnd *bool `json:"dnd,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// online
	Online *bool `json:"online,omitempty"`

	// type
	// Enum: [REGISTER MOBILE EXTERNAL]
	Type string `json:"type,omitempty"`
}

// Validate validates this device response
func (m *DeviceResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActivePhonelines(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceResponse) validateActiveGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.ActiveGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.ActiveGroups); i++ {
		if swag.IsZero(m.ActiveGroups[i]) { // not required
			continue
		}

		if m.ActiveGroups[i] != nil {
			if err := m.ActiveGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activeGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DeviceResponse) validateActivePhonelines(formats strfmt.Registry) error {

	if swag.IsZero(m.ActivePhonelines) { // not required
		return nil
	}

	for i := 0; i < len(m.ActivePhonelines); i++ {
		if swag.IsZero(m.ActivePhonelines[i]) { // not required
			continue
		}

		if m.ActivePhonelines[i] != nil {
			if err := m.ActivePhonelines[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activePhonelines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var deviceResponseTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["REGISTER","MOBILE","EXTERNAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceResponseTypeTypePropEnum = append(deviceResponseTypeTypePropEnum, v)
	}
}

const (

	// DeviceResponseTypeREGISTER captures enum value "REGISTER"
	DeviceResponseTypeREGISTER string = "REGISTER"

	// DeviceResponseTypeMOBILE captures enum value "MOBILE"
	DeviceResponseTypeMOBILE string = "MOBILE"

	// DeviceResponseTypeEXTERNAL captures enum value "EXTERNAL"
	DeviceResponseTypeEXTERNAL string = "EXTERNAL"
)

// prop value enum
func (m *DeviceResponse) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deviceResponseTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeviceResponse) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceResponse) UnmarshalBinary(b []byte) error {
	var res DeviceResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
