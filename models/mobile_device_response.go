// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MobileDeviceResponse mobile device response
//
// swagger:model MobileDeviceResponse
type MobileDeviceResponse struct {

	// active groups
	ActiveGroups []*ActiveRouting `json:"activeGroups"`

	// active phonelines
	ActivePhonelines []*ActiveRouting `json:"activePhonelines"`

	// alias
	Alias string `json:"alias,omitempty"`

	// credentials
	Credentials *MobileCredentialsResponse `json:"credentials,omitempty"`

	// dnd
	Dnd *bool `json:"dnd,omitempty"`

	// esim
	Esim *bool `json:"esim,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// online
	Online *bool `json:"online,omitempty"`

	// sim state
	// Enum: [INACTIVE PENDING ACTIVE]
	SimState string `json:"simState,omitempty"`

	// type
	// Enum: [REGISTER MOBILE EXTERNAL]
	Type string `json:"type,omitempty"`
}

// Validate validates this mobile device response
func (m *MobileDeviceResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActivePhonelines(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSimState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MobileDeviceResponse) validateActiveGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.ActiveGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.ActiveGroups); i++ {
		if swag.IsZero(m.ActiveGroups[i]) { // not required
			continue
		}

		if m.ActiveGroups[i] != nil {
			if err := m.ActiveGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activeGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceResponse) validateActivePhonelines(formats strfmt.Registry) error {

	if swag.IsZero(m.ActivePhonelines) { // not required
		return nil
	}

	for i := 0; i < len(m.ActivePhonelines); i++ {
		if swag.IsZero(m.ActivePhonelines[i]) { // not required
			continue
		}

		if m.ActivePhonelines[i] != nil {
			if err := m.ActivePhonelines[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activePhonelines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MobileDeviceResponse) validateCredentials(formats strfmt.Registry) error {

	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	if m.Credentials != nil {
		if err := m.Credentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

var mobileDeviceResponseTypeSimStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INACTIVE","PENDING","ACTIVE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mobileDeviceResponseTypeSimStatePropEnum = append(mobileDeviceResponseTypeSimStatePropEnum, v)
	}
}

const (

	// MobileDeviceResponseSimStateINACTIVE captures enum value "INACTIVE"
	MobileDeviceResponseSimStateINACTIVE string = "INACTIVE"

	// MobileDeviceResponseSimStatePENDING captures enum value "PENDING"
	MobileDeviceResponseSimStatePENDING string = "PENDING"

	// MobileDeviceResponseSimStateACTIVE captures enum value "ACTIVE"
	MobileDeviceResponseSimStateACTIVE string = "ACTIVE"
)

// prop value enum
func (m *MobileDeviceResponse) validateSimStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, mobileDeviceResponseTypeSimStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MobileDeviceResponse) validateSimState(formats strfmt.Registry) error {

	if swag.IsZero(m.SimState) { // not required
		return nil
	}

	// value enum
	if err := m.validateSimStateEnum("simState", "body", m.SimState); err != nil {
		return err
	}

	return nil
}

var mobileDeviceResponseTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["REGISTER","MOBILE","EXTERNAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mobileDeviceResponseTypeTypePropEnum = append(mobileDeviceResponseTypeTypePropEnum, v)
	}
}

const (

	// MobileDeviceResponseTypeREGISTER captures enum value "REGISTER"
	MobileDeviceResponseTypeREGISTER string = "REGISTER"

	// MobileDeviceResponseTypeMOBILE captures enum value "MOBILE"
	MobileDeviceResponseTypeMOBILE string = "MOBILE"

	// MobileDeviceResponseTypeEXTERNAL captures enum value "EXTERNAL"
	MobileDeviceResponseTypeEXTERNAL string = "EXTERNAL"
)

// prop value enum
func (m *MobileDeviceResponse) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, mobileDeviceResponseTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MobileDeviceResponse) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MobileDeviceResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MobileDeviceResponse) UnmarshalBinary(b []byte) error {
	var res MobileDeviceResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
