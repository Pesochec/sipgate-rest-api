// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HistoryEntryResponse history entry response
//
// swagger:model HistoryEntryResponse
type HistoryEntryResponse struct {

	// archived
	Archived *bool `json:"archived,omitempty"`

	// connection ids
	ConnectionIds []string `json:"connectionIds"`

	// created
	Created string `json:"created,omitempty"`

	// direction
	// Enum: [INCOMING OUTGOING MISSED_INCOMING MISSED_OUTGOING]
	Direction string `json:"direction,omitempty"`

	// endpoints
	Endpoints []*RoutedEndpointResponse `json:"endpoints"`

	// id
	ID string `json:"id,omitempty"`

	// incoming
	Incoming *bool `json:"incoming,omitempty"`

	// labels
	// Unique: true
	Labels []string `json:"labels"`

	// last modified
	LastModified string `json:"lastModified,omitempty"`

	// note
	Note string `json:"note,omitempty"`

	// read
	Read *bool `json:"read,omitempty"`

	// source
	Source string `json:"source,omitempty"`

	// source alias
	SourceAlias string `json:"sourceAlias,omitempty"`

	// starred
	Starred *bool `json:"starred,omitempty"`

	// status
	// Enum: [NOPICKUP BUSY PICKUP FORWARD]
	Status string `json:"status,omitempty"`

	// target
	Target string `json:"target,omitempty"`

	// target alias
	TargetAlias string `json:"targetAlias,omitempty"`

	// type
	// Enum: [CALL VOICEMAIL SMS FAX]
	Type string `json:"type,omitempty"`
}

// Validate validates this history entry response
func (m *HistoryEntryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndpoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var historyEntryResponseTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INCOMING","OUTGOING","MISSED_INCOMING","MISSED_OUTGOING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		historyEntryResponseTypeDirectionPropEnum = append(historyEntryResponseTypeDirectionPropEnum, v)
	}
}

const (

	// HistoryEntryResponseDirectionINCOMING captures enum value "INCOMING"
	HistoryEntryResponseDirectionINCOMING string = "INCOMING"

	// HistoryEntryResponseDirectionOUTGOING captures enum value "OUTGOING"
	HistoryEntryResponseDirectionOUTGOING string = "OUTGOING"

	// HistoryEntryResponseDirectionMISSEDINCOMING captures enum value "MISSED_INCOMING"
	HistoryEntryResponseDirectionMISSEDINCOMING string = "MISSED_INCOMING"

	// HistoryEntryResponseDirectionMISSEDOUTGOING captures enum value "MISSED_OUTGOING"
	HistoryEntryResponseDirectionMISSEDOUTGOING string = "MISSED_OUTGOING"
)

// prop value enum
func (m *HistoryEntryResponse) validateDirectionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, historyEntryResponseTypeDirectionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HistoryEntryResponse) validateDirection(formats strfmt.Registry) error {

	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	// value enum
	if err := m.validateDirectionEnum("direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

func (m *HistoryEntryResponse) validateEndpoints(formats strfmt.Registry) error {

	if swag.IsZero(m.Endpoints) { // not required
		return nil
	}

	for i := 0; i < len(m.Endpoints); i++ {
		if swag.IsZero(m.Endpoints[i]) { // not required
			continue
		}

		if m.Endpoints[i] != nil {
			if err := m.Endpoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("endpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HistoryEntryResponse) validateLabels(formats strfmt.Registry) error {

	if swag.IsZero(m.Labels) { // not required
		return nil
	}

	if err := validate.UniqueItems("labels", "body", m.Labels); err != nil {
		return err
	}

	return nil
}

var historyEntryResponseTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NOPICKUP","BUSY","PICKUP","FORWARD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		historyEntryResponseTypeStatusPropEnum = append(historyEntryResponseTypeStatusPropEnum, v)
	}
}

const (

	// HistoryEntryResponseStatusNOPICKUP captures enum value "NOPICKUP"
	HistoryEntryResponseStatusNOPICKUP string = "NOPICKUP"

	// HistoryEntryResponseStatusBUSY captures enum value "BUSY"
	HistoryEntryResponseStatusBUSY string = "BUSY"

	// HistoryEntryResponseStatusPICKUP captures enum value "PICKUP"
	HistoryEntryResponseStatusPICKUP string = "PICKUP"

	// HistoryEntryResponseStatusFORWARD captures enum value "FORWARD"
	HistoryEntryResponseStatusFORWARD string = "FORWARD"
)

// prop value enum
func (m *HistoryEntryResponse) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, historyEntryResponseTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HistoryEntryResponse) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var historyEntryResponseTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CALL","VOICEMAIL","SMS","FAX"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		historyEntryResponseTypeTypePropEnum = append(historyEntryResponseTypeTypePropEnum, v)
	}
}

const (

	// HistoryEntryResponseTypeCALL captures enum value "CALL"
	HistoryEntryResponseTypeCALL string = "CALL"

	// HistoryEntryResponseTypeVOICEMAIL captures enum value "VOICEMAIL"
	HistoryEntryResponseTypeVOICEMAIL string = "VOICEMAIL"

	// HistoryEntryResponseTypeSMS captures enum value "SMS"
	HistoryEntryResponseTypeSMS string = "SMS"

	// HistoryEntryResponseTypeFAX captures enum value "FAX"
	HistoryEntryResponseTypeFAX string = "FAX"
)

// prop value enum
func (m *HistoryEntryResponse) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, historyEntryResponseTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HistoryEntryResponse) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HistoryEntryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HistoryEntryResponse) UnmarshalBinary(b []byte) error {
	var res HistoryEntryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
