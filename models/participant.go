// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Participant participant
//
// swagger:model Participant
type Participant struct {

	// Participant is on hold
	// Required: true
	Hold bool `json:"hold"`

	// Participant is muted
	// Required: true
	Muted bool `json:"muted"`

	// Participant is the call owner
	// Required: true
	Owner bool `json:"owner"`

	// The unique participant identifier
	// Required: true
	ParticipantID *string `json:"participantId"`

	// Participants phone number (can be empty for various reasons, e.g. anonymous participant)
	// Required: true
	PhoneNumber *string `json:"phoneNumber"`
}

// Validate validates this participant
func (m *Participant) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMuted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParticipantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Participant) validateHold(formats strfmt.Registry) error {

	if err := validate.Required("hold", "body", bool(m.Hold)); err != nil {
		return err
	}

	return nil
}

func (m *Participant) validateMuted(formats strfmt.Registry) error {

	if err := validate.Required("muted", "body", bool(m.Muted)); err != nil {
		return err
	}

	return nil
}

func (m *Participant) validateOwner(formats strfmt.Registry) error {

	if err := validate.Required("owner", "body", bool(m.Owner)); err != nil {
		return err
	}

	return nil
}

func (m *Participant) validateParticipantID(formats strfmt.Registry) error {

	if err := validate.Required("participantId", "body", m.ParticipantID); err != nil {
		return err
	}

	return nil
}

func (m *Participant) validatePhoneNumber(formats strfmt.Registry) error {

	if err := validate.Required("phoneNumber", "body", m.PhoneNumber); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Participant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Participant) UnmarshalBinary(b []byte) error {
	var res Participant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
